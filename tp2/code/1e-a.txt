    CALL main           ; Salta al programa principal
    HLT

output: DB 0xE8         ; Posición del cursor
dato:   DB 5            ; Dato

main:                   ; Programa principal
    DEC SP              ; Alocamos 1 byte para factorial(n)
    PUSH [dato]         ; Argumento 'n' al stack
    CALL printNo        ; Llamamos a printNo(n)
    MOV [SP+1], '!'     ; Argumento '!' al stack
    CALL printChar      ; Llamamos a printChar('!')
    MOV [SP+1], '='     ; Argumento '=' al stack
    CALL printChar      ; Llamamos a printChar('=')
    INC SP              ; Sacamos argumento del stack
    PUSH [dato]         ; Argumento 'n' al stack
    CALL factorial      ; Calculamos el factorial
    MOV [SP+1], '='     ; Argumento '=' al stack
    CALL printChar      ; Llamamos a printChar('=')
    INC SP              ; Sacamos argumento del stack
    CALL printNo        ; Llamamos a printNo(n!)
    INC SP              ; Liberamos memoria
    RET

factorial:              ; factorial(n) como función recursiva
    PUSH [SP+2]         ; Argumento 'n' al stack
    MOV A, [SP+1]       ; Argumento 'n' a registro A
    CMP A, 0            ; Comparamos 'n' con 0
    JZ base             ; Si 'n' == 0, saltamos a base
    CMP A, 1            ; Comparamos 'n' con 1
    JZ base             ; Si 'n' == 1, saltamos a base
    CALL printNo        ; Llamamos a printNo(n)
    MOV [SP+1], '×'     ; Argumento '×' al stack
    CALL printChar      ; Llamamos a printChar('×')
    MOV A, [SP+3]       ; Argumento 'n' a registro A
    DEC A               ; Decrementamos 'n'
    PUSH A              ; Argumento 'n-1' al stack
    CALL factorial      ; Llamamos a factorial(n-1)
    INC SP              ; Sacamos argumento del stack
    MOV A, [SP+1]       ; Resultado de factorial(n-1) a A
    MOV B, [SP+3]       ; Argumento 'n' a B
    MUL B               ; Multiplicar n*(n-1)!
    MOV [SP+4], A       ; Resultado a valor de retorno
    INC SP              ; Liberamos memoria
    RET
base:
    MOV [SP+1], 1       ; Argumento '1' al stack
    CALL printNo        ; Llamamos a printNo(1)
    MOV [SP+4], 1       ; Si es cero, 1 a valor de retorno
    INC SP              ; Liberamos memoria
    RET